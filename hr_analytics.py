# -*- coding: utf-8 -*-
"""HR Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19mKAG6zq6G-bCBuIPr9rPTULmQ1f99yJ
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sns
import matplotlib.pyplot as plt
import shap

df = pd.read_csv('WA_Fn-UseC_-HR-Employee-Attrition.csv')
df

df.drop(['EmployeeNumber', 'Over18', 'EmployeeCount', 'StandardHours'], axis=1, inplace=True)

df['IncomeBand'] = pd.qcut(df['MonthlyIncome'], q=4, labels=['Low', 'Medium', 'High', 'Very High'])

df_encoded = df.copy()
df_encoded.drop(['IncomeBand'], axis=1, inplace=True)

label_cols = df_encoded.select_dtypes(include='object').columns
le = LabelEncoder()
for col in label_cols:
    df_encoded[col] = le.fit_transform(df_encoded[col])

X = df_encoded.drop('Attrition', axis=1)
y = df_encoded['Attrition']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("âœ… Accuracy:", accuracy_score(y_test, y_pred))
print("\nðŸ“Š Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nðŸ“„ Classification Report:\n", classification_report(y_test, y_pred))

plt.figure(figsize=(5, 4))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt="d", cmap="Blues")
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X_test)

# Assuming a binary classification problem (2 classes)
# Select the SHAP values for the class you want to visualize (e.g., class 1)
shap_values_class1 = shap_values[:, :, 1]  # Select SHAP values for the second class

# Create the summary plot
shap.summary_plot(shap_values_class1, X_test, plot_type='bar')